<snippet>
	<content><![CDATA[
/**
 * ${3:Hello} Quickicon plugin
 *
 * @package		${1:Hello}
 * @subpackage	${2:plg_hello}
 * @since		2.5
 */
class plgQuickicon${3:Hello} extends JPlugin
{
	/**
	 * Constructor
	 *
	 * @param       object  \$subject The object to observe
	 * @param       array   \$config  An array that holds the plugin configuration
	 *
	 * @since       2.5
	 */
	public function __construct(& \$subject, \$config)
	{
		parent::__construct(\$subject, \$config);
		\$this->loadLanguage();
	}

	/**
	 * This method is called when the Quick Icons module is constructing its set
	 * of icons. You can return an array which defines a single icon and it will
	 * be rendered right after the stock Quick Icons.
	 *
	 * @param  \$context  The calling context
	 *
	 * @return array A list of icon definition associative arrays, consisting of the
	 *				 keys link, image, text and access.
	 *
	 * @since       2.5
	 */
	public function onGetIcons(\$context)
	{
		if (\$context != \$this->params->get('context', 'mod_quickicon') || !JFactory::getUser()->authorise('core.manage', 'com_installer')) {
			return;
		}

		return array(array(
			'link' => 'index.php?option=${4:com_hello}',
			'image' => JURI::root() . 'media/${4:com_hello}/images/icon/${5:hello}.png',,
			'text' => JText::_('PLG_QUICKICON_${6:HELLO}_CHECKING'),
			'id' => 'plg_quickicon_${4:com_hello}'
		));
	}
}

]]></content>
<tabTrigger>jpluginquickicon</tabTrigger>
</snippet>
